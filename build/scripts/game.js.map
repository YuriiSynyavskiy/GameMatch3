{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/objects/DonutConstructor.js",
    "src/objects/sfxButton.js",
    "src/states/MainMenu.js",
    "src/states/PlayState.js",
    "src/states/TutorialState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import { MainMenu } from 'states/MainMenu';\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tsuper(window.innerWidth / 2.5, window.innerHeight, Phaser.AUTO);\r\n\t\tthis.state.add('MainMenu', MainMenu, false);\r\n\t\tthis.state.start('MainMenu');\r\n\t}\r\n\r\n}\r\n\r\nnew Game();\r\n",
    "class Donut {\r\n    constructor(height, width, index, positionInMatrix) {\r\n        this.height = height;\r\n        this.width = width;\r\n        this.index = index;  // 1 - 6\r\n        this.position = positionInMatrix;  // x, y\r\n    }\r\n\r\n    outputInfo(){\r\n        console.log(this.index, this.position);\r\n    }\r\n\r\n}\r\n\r\nexport default Donut;\r\n",
    "export function createButton(game, x, y, image, width, height, cb) {\r\n    let button = game.add.button(x, y, image, cb, game);\r\n\r\n    button.width = width;\r\n    button.height = height;\r\n\r\n    return button;\r\n}\r\n",
    "import PlayState from 'states/PlayState';\r\nimport TutorialState from 'states/TutorialState';\r\nimport {createButton} from '../objects/sfxButton';\r\n\r\nexport class MainMenu extends Phaser.State {\r\n    preload() {\r\n        this.load.audio('backgroundMusic', '../assets/audio/background.mp3');\r\n        this.load.image('backgroundImage', '../assets/images/backgrounds/background.jpg');\r\n        this.load.image('donut', '../assets/images/donut.png');\r\n        this.load.image('donutShadow', '../assets/images/big-shadow.png');\r\n        this.load.image('soundButton', '../assets/images/btn-sfx.png');\r\n        this.load.image('donutsLogo', '../assets/images/donuts_logo.png');\r\n        this.load.image('playBtn', '../assets/images/btn-play.png');\r\n        this.load.image('cursor', '../assets/images/game/hand.png');\r\n        this.load.image('howToPlayBtn', '../assets/images/btn-howToPlay.png');\r\n        this.state.add('playState', PlayState, false);\r\n        this.state.add('tutorialState', TutorialState, false);\r\n    }\r\n\r\n    create() {\r\n        window['music'] = this.add.audio('backgroundMusic');\r\n        window['music'].loop = true;\r\n\r\n        window['music'].play();\r\n\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let soundButton = createButton(this, 900, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                soundButton.tint = 0xff0000;\r\n\r\n                window['music'].mute = true;\r\n            }\r\n        });\r\n\r\n        this.animate(this, soundButton, 900, 10);\r\n\r\n        let donutShadow = this.add.sprite(this.world.centerX - 185, this.world.centerY - 205, 'donutShadow');\r\n        donutShadow.width = 450;\r\n        donutShadow.height = 450;\r\n\r\n        let donut = this.add.sprite(this.world.centerX - 225, this.world.centerY - 225, 'donut');\r\n        donut.width = 450;\r\n        donut.height = 450;\r\n\r\n        let donutsLogo = this.add.sprite(this.world.centerX + 350, this.world.centerY - 325, 'donutsLogo');\r\n        donutsLogo.width = 480;\r\n        donutsLogo.height = 170;\r\n\r\n        this.animate(this, donutsLogo, this.world.centerX + 350, 85);\r\n\r\n        let playBtn = createButton(this, this.world.centerX + 350, this.world.centerY + 50, 'playBtn', 230, 150, () => {\r\n            window['music'].mute = true;\r\n\r\n            this.state.start('playState');\r\n        });\r\n\r\n        this.animate(this, playBtn, this.world.centerX + 350, 195);\r\n\r\n        let howToPlayBtn = createButton(this, this.world.centerX + 350, this.world.centerY + 200, 'howToPlayBtn', 210, 130, () => {\r\n            window['music'].mute = true;\r\n\r\n            this.state.start('tutorialState');\r\n        });\r\n\r\n        this.animate(this, howToPlayBtn, this.world.centerX + 350, 205);\r\n    }\r\n\r\n    update() {\r\n\r\n    }\r\n\r\n    animate(game, item, start, end, stopNumber = 0) {\r\n        if (stopNumber >= start - end) {\r\n            return 0;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            item.x = start - stopNumber;\r\n\r\n            stopNumber += 3;\r\n\r\n            this.animate(game, item, start, end, stopNumber);\r\n        }, 1);\r\n    }\r\n\r\n}\r\n",
    "import Donut from '../objects/DonutConstructor';\r\nimport {createButton} from '../objects/sfxButton';\r\nimport checkMusic from 'states/MainMenu';\r\n\r\nlet mainMatrix = []; // global matrix\r\nlet indexes = {\r\n    1: 'red-01',\r\n    2: 'blue-02',\r\n    3: 'green-03',\r\n    4: 'lightBlue-04',\r\n    5: 'yellow-05',\r\n    6: 'pink-06'\r\n};\r\n\r\nclass PlayState extends Phaser.State {\r\n\r\n    preload() {\r\n        this.load.image('backgroundImage', '../assets/images/backgrounds/background.jpg');\r\n        this.load.image('soundButton', '../assets/images/btn-sfx.png');\r\n        this.load.image('scoreTable', '../assets/images/bg-score.png');\r\n        this.load.image('timeUp', '../assets/images/text-timeup.png');\r\n        this.load.images(\r\n            ['red-01', 'blue-02', 'green-03', 'lightBlue-04', 'yellow-05', 'pink-06'],\r\n            [\r\n                '../assets/images/game/gem-01.png', '../assets/images/game/gem-02.png', '../assets/images/game/gem-03.png',\r\n                '../assets/images/game/gem-04.png', '../assets/images/game/gem-05.png', '../assets/images/game/gem-06.png'\r\n            ]\r\n        );\r\n        this.load.audio('backgroundMusic', '../assets/audio/background.mp3');\r\n        this.load.bitmapFont('fredokaOne', '../assets/fonts/FredokaOne-Regular.ttf');\r\n    }\r\n\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let soundButton = createButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        if (window['music']) {\r\n            soundButton.tint = 0xff0000;\r\n        } else {\r\n            soundButton.tint = 0xFFFFFF;\r\n        }\r\n\r\n        let scoreTable = this.add.sprite(this.world.centerX - 170, this.world.centerY - 380, 'scoreTable');\r\n        scoreTable.width = 380;\r\n        scoreTable.height = 150;\r\n\r\n        let scoreText = this.add.text(this.world.centerX, this.world.centerY - 348, '0', {\r\n            font: '58px Fredoka One',\r\n            fill: 'red'\r\n        });\r\n\r\n        //function which generate array\r\n        //function which animaate/method Donut\r\n    }\r\n\r\n    generateArray() {\r\n        // mainMatrix.push(new Donut(200,200,2,0));\r\n        // this.add.sprite(0,0, indexes[mainMatrix[0].index]);\r\n    }\r\n\r\n}\r\n\r\nexport default PlayState;\r\n",
    "import {createButton} from '../objects/sfxButton';\r\nimport {MainMenu} from '../states/MainMenu';\r\n\r\nclass TutorialState extends Phaser.State {\r\n    preload() {\r\n        this.load.audio('backgroundMusic', '../assets/audio/background.mp3');\r\n        this.load.image('backgroundImage', '../assets/images/backgrounds/background.jpg');\r\n        this.load.image('returnButton', '../assets/images/btn-return.png');\r\n        this.load.image('donutRed', '../assets/images/game/gem-01.png');\r\n        this.load.image('donutBlue', '../assets/images/game/gem-02.png');\r\n        this.load.bitmapFont('fredokaOne', '../assets/fonts/FredokaOne-Regular.ttf');\r\n        this.state.add('mainMenu', MainMenu, false);\r\n    }\r\n\r\n    create() {\r\n        let backgroundMusic = this.add.audio('backgroundMusic');\r\n        backgroundMusic.loop = true;\r\n        backgroundMusic.play();\r\n\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let returnBtn = createButton(this, this.world.centerX + 110, this.world.centerY + 350, 'returnButton', 230, 150, () => {\r\n            backgroundMusic.mute = true;\r\n\r\n            this.state.start('mainMenu');\r\n        });\r\n\r\n        returnBtn.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        let tutorialText1 = this.add.text(\r\n            this.world.centerX + 280, this.world.centerY - 80,\r\n            '          How to play \\nYou have to make a horizontal or vertical line of 3 or more same donuts',\r\n            { fontSize: '55px', fill: 'violet', font: \"fredokaOne\", wordWrap: true, wordWrapWidth: 600 }\r\n        );\r\n\r\n        tutorialText1.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        this.add.sprite(this.world.centerX - 295, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 215, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 135, this.world.centerY - 90, 'donutRed');\r\n\r\n        this.add.sprite(this.world.centerX + 30, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 110, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 190, this.world.centerY - 90, 'donutBlue');\r\n\r\n        let tutorialText2 = this.add.text(\r\n            this.world.centerX + 270, this.world.centerY + 200,\r\n            'You have 30 seconds so get as much score as you can.',\r\n            { font: \"55px Fredoka One\", fill: 'violet', wordWrap: true, wordWrapWidth: 600 }\r\n        );\r\n\r\n        tutorialText2.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n    }\r\n}\r\n\r\nexport default TutorialState;\r\n"
  ]
}