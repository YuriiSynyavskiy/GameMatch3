{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/boot.js",
    "src/objects/DonutConstructor.js",
    "src/objects/customButton.js",
    "src/states/MainMenu.js",
    "src/states/PlayState.js",
    "src/states/Preloader.js",
    "src/states/TutorialState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import { MainMenu } from 'states/MainMenu';\r\nimport Preloader from './states/Preloader';\r\nimport TutorialState from './states/TutorialState';\r\nimport PlayState from './states/PlayState';\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tsuper(614.4 , 750, Phaser.AUTO);\r\n\t\tthis.state.add('mainMenu', MainMenu, false);\r\n\t\tthis.state.add('preloader', Preloader, false);\r\n\t\tthis.state.add('tutorialState', TutorialState, false);\r\n\t\tthis.state.add('playState', PlayState, false);\r\n\r\n\t\tthis.state.start('preloader');\r\n\t}\r\n\r\n}\r\n\r\nnew Game();\r\n",
    "class Donut {\r\n    constructor(height, width, index, sprite) {\r\n        this.height = height;\r\n        this.width = width;\r\n        this.sprite = sprite;  //sprite for this donut\r\n        this.index = index;  // 1 - 6\r\n    }\r\n}\r\n\r\nexport default Donut;\r\n",
    "export function createCustomButton(game, x, y, image, width, height, cb) {\r\n    let button = game.add.button(x, y, image, cb, game);\r\n\r\n    button.width = width;\r\n    button.height = height;\r\n\r\n    return button;\r\n}\r\n",
    "import {createCustomButton} from '../objects/customButton';\r\n\r\nexport class MainMenu extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n        console.log('123');\r\n        let soundButton = createCustomButton(this, 900, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                soundButton.tint = 0xff0000;\r\n\r\n                window['music'].mute = true;\r\n            }\r\n        });\r\n\r\n        if (window['music'].mute) {\r\n            soundButton.tint = 0xff0000;\r\n        } else {\r\n            soundButton.tint = 0xFFFFFF;\r\n        }\r\n\r\n        this.animate(this, soundButton, 900, 10);\r\n\r\n        let donutShadow = this.add.sprite(this.world.centerX - 185, this.world.centerY - 205, 'donutShadow');\r\n        donutShadow.width = 450;\r\n        donutShadow.height = 450;\r\n\r\n        let donut = this.add.sprite(this.world.centerX - 225, this.world.centerY - 225, 'donut');\r\n        donut.width = 450;\r\n        donut.height = 450;\r\n\r\n        let donutsLogo = this.add.sprite(this.world.centerX + 350, this.world.centerY - 325, 'donutsLogo');\r\n        donutsLogo.width = 480;\r\n        donutsLogo.height = 170;\r\n\r\n        this.animate(this, donutsLogo, this.world.centerX + 350, 85);\r\n\r\n        let playBtn = createCustomButton(this, this.world.centerX + 350, this.world.centerY + 50, 'playBtn', 230, 150, () => {\r\n            this.state.start('playState');\r\n        });\r\n\r\n        this.animate(this, playBtn, this.world.centerX + 350, 195);\r\n\r\n        let howToPlayBtn = createCustomButton(this, this.world.centerX + 350, this.world.centerY + 200, 'howToPlayBtn', 210, 130, () => {\r\n            this.state.start('tutorialState');\r\n        });\r\n\r\n        this.animate(this, howToPlayBtn, this.world.centerX + 350, 205);\r\n    }\r\n\r\n    animate(game, item, start, end, stopNumber = 0) {\r\n        if (stopNumber >= start - end) {\r\n            return 0;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            item.x = start - stopNumber;\r\n\r\n            stopNumber += 3;\r\n\r\n            this.animate(game, item, start, end, stopNumber);\r\n        }, 1);\r\n    }\r\n\r\n}\r\n",
    "import {createCustomButton} from '../objects/customButton';\r\nimport Donut from '../objects/DonutConstructor';\r\n\r\nlet mainMatrix = []; // global matrix\r\n\r\nclass PlayState extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        //This will hold all of the donut sprites\r\n        this.donuts = this.game.add.group();\r\n\r\n        this.donutWidth =this.game.cache.getImage('red-01').width;     //donut width\r\n        this.donutHeight =this.game.cache.getImage('red-01').height;   //donut height\r\n\r\n        this.indexes = {                                // types of Donut\r\n            1: 'red-01',\r\n            2: 'blue-02',\r\n            3: 'green-03',\r\n            4: 'lightBlue-04',\r\n            5: 'yellow-05',\r\n            6: 'pink-06'\r\n        };\r\n\r\n        this.mainMatrix = [                             // global matrix\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null]\r\n        ];                              //\r\n        //Yura\r\n\r\n        let soundButton = createCustomButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        if (window['music'].mute) {\r\n            soundButton.tint = 0xff0000;\r\n        } else {\r\n            soundButton.tint = 0xFFFFFF;\r\n        }\r\n\r\n        let scoreTable = this.add.sprite(this.world.centerX - 170, this.world.centerY - 380, 'scoreTable');\r\n        scoreTable.width = 380;\r\n        scoreTable.height = 150;\r\n\r\n        let scoreText = this.add.text(this.world.centerX, this.world.centerY - 351, '0', {\r\n            font: '58px Fredoka One',\r\n            fill: 'red'\r\n        });\r\n\r\n        this.generateArray();\r\n        this.checkMatch();\r\n    }\r\n\r\n    generateArray() {\r\n        for(let i = 0; i < this.mainMatrix.length; i++){\r\n\r\n            //Loop through each position in a specific column, starting from the top\r\n\r\n            for(let j = 0; j < this.mainMatrix.length; j++){\r\n\r\n                //Add the donut to the game at this matrix position\r\n                let donut = this.addDonut(i, j);\r\n\r\n                //Keep a track of the donut position in our mainMatrix\r\n                this.mainMatrix[i][j] = donut;\r\n\r\n            }\r\n        }\r\n\r\n        //Once the donuts are ready, check for any matches on the grid\r\n        //this.game.time.events.add(600, function(){\r\n        //    this.checkMatch();});\r\n\r\n    }\r\n    addDonut(x, y){                       //for animation of drop-down of donuts\r\n        //Random Index from 1 - 6\r\n        let randomIndex  = Math.floor(Math.random()*6+1);\r\n\r\n        //Create random donut\r\n        //Add the tile at the correct x position, but add it to the top of the game (so we can slide it in)\r\n        let donut = this.add.sprite((x * this.donutWidth) + this.donutWidth/2 + 7 ,  0 , this.indexes[randomIndex]);\r\n\r\n        //Adding to group\r\n        // let donut = this.donuts.create((x * this.donutWidth) + this.donutWidth / 2 + 7, 0,  this.indexes[randomIndex]);\r\n        //\r\n\r\n\r\n        //Create object donut\r\n        let tempDonut = new Donut(this.donutHeight, this.donutWidth, randomIndex, donut );\r\n        //Animate the tile into the correct vertical position\r\n        this.game.add.tween(donut).to({y:y*this.donutHeight+(this.donutHeight/2) + 120}, 600, Phaser.Easing.Linear.In, true)\r\n\r\n        //Set the tiles anchor point to the center\r\n        donut.anchor.setTo(0.5, 0.5);\r\n\r\n        //Enable input on the tile\r\n        donut.inputEnabled = true;\r\n\r\n\r\n        //Trigger the tileDown function whenever the user clicks or taps on this tile\r\n        //donut.events.onInputDown.add(me.tileDown, me);\r\n\r\n        return tempDonut;\r\n    }\r\n\r\n    checkMatch(){\r\n        let combinations  = this.getMatches();\r\n        console.log(combinations);\r\n    }\r\n    getMatches(){\r\n        let combinations = [];\r\n        let groupOf3orMore = [];\r\n        for(let i=0; i<this.mainMatrix.length; i++){\r\n            let tempLine = this.mainMatrix[i];\r\n            console.log(tempLine);\r\n            for(let j=0; j<tempLine.length; j++){\r\n                if(tempLine[j] && tempLine[j+1]&&tempLine[j+2]){\r\n                    if(tempLine[j].index===tempLine[j+1].index===tempLine[j+2].index){\r\n                        groupOf3orMore.push(tempLine[j], tempLine[j+1], tempLine[j+2]);     // push this 3 elements\r\n                        let tempIndex = tempLine[j].index;                                  //tempValue for checking value of next\r\n                        j+=2;\r\n                        for(let nextDonut = j+3; nextDonut<tempLine.length; nextDonut++){\r\n                            if(tempIndex = tempLine[nextDonut].index){\r\n                                groupOf3orMore.push(tempLine[nextDonut]);\r\n                                j+=1;\r\n                            }\r\n                            else{\r\n                                break;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default PlayState;\r\n",
    "class Preloader extends Phaser.State {\r\n    preload() {\r\n        this.load.audio('backgroundMusic', '../assets/audio/background.mp3');\r\n        this.load.image('backgroundImage', '../assets/images/backgrounds/background.jpg');\r\n        this.load.image('donut', '../assets/images/donut.png');\r\n        this.load.image('donutShadow', '../assets/images/big-shadow.png');\r\n        this.load.image('soundButton', '../assets/images/btn-sfx.png');\r\n        this.load.image('donutsLogo', '../assets/images/donuts_logo.png');\r\n        this.load.image('playBtn', '../assets/images/btn-play.png');\r\n        this.load.image('cursor', '../assets/images/game/hand.png');\r\n        this.load.image('howToPlayBtn', '../assets/images/btn-howToPlay.png');\r\n        this.load.image('scoreTable', '../assets/images/bg-score.png');\r\n        this.load.image('timeUp', '../assets/images/text-timeup.png');\r\n        this.load.images(\r\n            ['red-01', 'blue-02', 'green-03', 'lightBlue-04', 'yellow-05', 'pink-06'],\r\n            [\r\n                '../assets/images/game/gem-01.png', '../assets/images/game/gem-02.png', '../assets/images/game/gem-03.png',\r\n                '../assets/images/game/gem-04.png', '../assets/images/game/gem-05.png', '../assets/images/game/gem-06.png'\r\n            ]\r\n        );\r\n        this.load.image('returnButton', '../assets/images/btn-return.png');\r\n        this.load.image('donutRed', '../assets/images/game/gem-01.png');\r\n        this.load.image('donutBlue', '../assets/images/game/gem-02.png');\r\n    }\r\n\r\n    create() {\r\n        window['music'] = this.add.audio('backgroundMusic');\r\n        window['music'].loop = true;\r\n\r\n        window['music'].play();\r\n\r\n        this.state.start('mainMenu');\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n",
    "import {createCustomButton} from '../objects/customButton';\r\n\r\nclass TutorialState extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let soundButton = createCustomButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        if (window['music'].mute) {\r\n            soundButton.tint = 0xff0000;\r\n        } else {\r\n            soundButton.tint = 0xFFFFFF;\r\n        }\r\n\r\n        let returnBtn = createCustomButton(this, this.world.centerX + 110, this.world.centerY + 350, 'returnButton', 230, 150, () => {\r\n            this.state.start('mainMenu');\r\n        });\r\n\r\n        returnBtn.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        let tutorialText1 = this.add.text(\r\n            this.world.centerX + 300, this.world.centerY - 80,\r\n            '          How to play \\nYou have to make a horizontal or vertical line of 3 or more same donuts',\r\n            { fontSize: '48px', fill: 'violet', font: \"Fredoka One\", wordWrap: true, wordWrapWidth: 650 }\r\n        );\r\n\r\n        tutorialText1.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        this.add.sprite(this.world.centerX - 295, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 215, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 135, this.world.centerY - 90, 'donutRed');\r\n\r\n        this.add.sprite(this.world.centerX + 30, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 110, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 190, this.world.centerY - 90, 'donutBlue');\r\n\r\n        let tutorialText2 = this.add.text(\r\n            this.world.centerX + 270, this.world.centerY + 208,\r\n            'You have 30 seconds so get as much score as you can.',\r\n            { font: \"50px Fredoka One\", fill: 'violet', wordWrap: true, wordWrapWidth: 600 }\r\n        );\r\n\r\n        tutorialText2.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n    }\r\n}\r\n\r\nexport default TutorialState;\r\n"
  ]
}