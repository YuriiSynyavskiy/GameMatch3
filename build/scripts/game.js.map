{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/boot.js",
    "src/objects/DonutConstructor.js",
    "src/objects/animateSprite.js",
    "src/objects/chechMusic.js",
    "src/objects/createCustomButton.js",
    "src/objects/createCustomSprite.js",
    "src/states/MainMenu.js",
    "src/states/PlayState.js",
    "src/states/Preloader.js",
    "src/states/TutorialState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import { MainMenu } from 'states/MainMenu';\r\nimport Preloader from './states/Preloader';\r\nimport TutorialState from './states/TutorialState';\r\nimport PlayState from './states/PlayState';\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tsuper(614.4, window.innerHeight, Phaser.AUTO);\r\n\r\n\t\tthis.state.add('mainMenu', MainMenu, false);\r\n\t\tthis.state.add('preloader', Preloader, false);\r\n\t\tthis.state.add('tutorialState', TutorialState, false);\r\n\t\tthis.state.add('playState', PlayState, false);\r\n\r\n\t\tthis.state.start('preloader');\r\n\t}\r\n\r\n}\r\n\r\nnew Game();\r\n",
    "class Donut {\r\n    constructor(height, width, index, sprite) {\r\n        this.height = height;\r\n        this.width = width;\r\n        this.sprite = sprite;  //sprite for this donut\r\n        this.index = index;  // 1 - 6\r\n    }\r\n}\r\n\r\nexport default Donut;\r\n",
    "export function animate(game, item, start, end, stopNumber = 0) {\r\n    if (stopNumber >= start - end) {\r\n        return 0;\r\n    }\r\n\r\n    setTimeout(() => {\r\n        item.x = start - stopNumber;\r\n\r\n        stopNumber += 3;\r\n\r\n        animate(game, item, start, end, stopNumber);\r\n    }, 1);\r\n}\r\n",
    "export function checkMusic(soundButton) {\r\n    if (window['music'].mute) {\r\n        soundButton.tint = 0xff0000;\r\n    } else {\r\n        soundButton.tint = 0xFFFFFF;\r\n    }\r\n}\r\n",
    "export function createCustomButton(game, x, y, image, width, height, cb) {\r\n    let button = game.add.button(x, y, image, cb, game);\r\n\r\n    button.width = width;\r\n    button.height = height;\r\n\r\n    return button;\r\n}\r\n",
    "export function createCustomSprite(game, x, y, image, width, height, ) {\r\n    let sprite = game.add.sprite(x, y, image);\r\n\r\n    sprite.width = width;\r\n    sprite.height = height;\r\n\r\n    return sprite;\r\n}\r\n",
    "import {createCustomButton} from '../objects/createCustomButton';\r\nimport {checkMusic} from '../objects/chechMusic';\r\nimport {createCustomSprite} from '../objects/createCustomSprite';\r\nimport {animate} from '../objects/animateSprite';\r\n\r\nexport class MainMenu extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let soundButton = createCustomButton(this, 900, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                soundButton.tint = 0xff0000;\r\n\r\n                window['music'].mute = true;\r\n            }\r\n        });\r\n\r\n        checkMusic(soundButton);\r\n\r\n        animate(this, soundButton, 900, 10);\r\n\r\n        let donutShadow = createCustomSprite(this, this.world.centerX - 185, this.world.centerY - 205, 'donutShadow', 450, 450);\r\n\r\n        let donut = createCustomSprite(this,this.world.centerX - 225, this.world.centerY - 225, 'donut', 450, 450);\r\n\r\n        let donutsLogo = createCustomSprite(this,this.world.centerX + 550, this.world.centerY - 325, 'donutsLogo', 480, 170);\r\n\r\n        animate(this, donutsLogo, this.world.centerX + 550, 85);\r\n\r\n        let playBtn = createCustomButton(this, this.world.centerX + 550, this.world.centerY + 50, 'playBtn', 230, 150, () => {\r\n            this.state.start('playState');\r\n        });\r\n\r\n        animate(this, playBtn, this.world.centerX + 550, 195);\r\n\r\n        let howToPlayBtn = createCustomButton(this, this.world.centerX + 550, this.world.centerY + 200, 'howToPlayBtn', 210, 130, () => {\r\n            this.state.start('tutorialState');\r\n        });\r\n\r\n        animate(this, howToPlayBtn, this.world.centerX + 550, 205);\r\n    }\r\n}\r\n",
    "import {createCustomButton} from '../objects/createCustomButton';\r\nimport Donut from '../objects/DonutConstructor';\r\nimport {checkMusic} from \"../objects/chechMusic\";\r\nimport {createCustomSprite} from '../objects/createCustomSprite';\r\n\r\nclass PlayState extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        //This will hold all of the donut sprites\r\n        this.donuts = this.game.add.group();\r\n\r\n        this.donutWidth = this.game.cache.getImage('red-01').width;     //donut width\r\n        this.donutHeight = this.game.cache.getImage('red-01').height;   //donut height\r\n\r\n        this.indexes = {                                // types of Donut\r\n            1: 'red-01',\r\n            2: 'blue-02',\r\n            3: 'green-03',\r\n            4: 'lightBlue-04',\r\n            5: 'yellow-05',\r\n            6: 'pink-06'\r\n        };\r\n\r\n        this.mainMatrix = [                             // global matrix\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null]\r\n        ];                              //\r\n        //Yura\r\n\r\n        let soundButton = createCustomButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        checkMusic(soundButton);\r\n\r\n        let scoreTable = createCustomSprite(this, this.world.centerX - 170, this.world.centerY - 380, 'scoreTable', 380, 150);\r\n\r\n        let scoreText = this.add.text(this.world.centerX, this.world.centerY - 351, '0', {\r\n            font: '58px Fredoka One',\r\n            fill: 'red'\r\n        });\r\n\r\n        this.generateArray();\r\n    }\r\n\r\n    generateArray() {\r\n        for (let i = 0; i < this.mainMatrix.length; i++) {\r\n\r\n            //Loop through each position in a specific column, starting from the top\r\n\r\n            for (let j = 0; j < this.mainMatrix.length; j++) {\r\n\r\n                //Add the donut to the game at this matrix position\r\n                let donut = this.addDonut(i, j);\r\n\r\n                //Keep a track of the donut position in our mainMatrix\r\n                this.mainMatrix[i][j] = donut;\r\n\r\n            }\r\n        }\r\n        console.log(this.mainMatrix);\r\n        //Once the donuts are ready, check for any matches on the grid\r\n        //this.game.time.events.add(600, function(){\r\n        //    this.checkMatch();});\r\n\r\n    }\r\n\r\n    addDonut(x, y) {                       //for animation of drop-down of donuts\r\n        //Random Index from 1 - 6\r\n        let randomIndex = Math.floor(Math.random() * 6 + 1);\r\n\r\n        // Create random donut\r\n\r\n\r\n        //Add the tile at the correct x position, but add it to the top of the game (so we can slide it in)\r\n        let donut = this.donuts.create((x * this.donutWidth) + this.donutWidth / 2, 0, this.indexes[randomIndex]);\r\n\r\n\r\n        let tempDonut = new Donut(this.donutHeight, this.donutWidth, randomIndex, donut);\r\n        //Animate the tile into the correct vertical position\r\n        this.game.add.tween(donut).to({y: y * this.donutHeight + (this.donutHeight / 2)}, 500, Phaser.Easing.Linear.In, true)\r\n\r\n        //Set the tiles anchor point to the center\r\n        donut.anchor.setTo(0.5, 0.5);\r\n\r\n        //Enable input on the tile\r\n        donut.inputEnabled = true;\r\n\r\n\r\n        //Trigger the tileDown function whenever the user clicks or taps on this tile\r\n        //donut.events.onInputDown.add(me.tileDown, me);\r\n\r\n        return tempDonut;\r\n    }\r\n\r\n    checkMatch() {\r\n        console.log('Already is ready 3 matches');\r\n    }\r\n\r\n}\r\n\r\nexport default PlayState;\r\n",
    "class Preloader extends Phaser.State {\r\n    preload() {\r\n        this.load.audio('backgroundMusic', '../assets/audio/background.mp3');\r\n        this.load.image('backgroundImage', '../assets/images/backgrounds/background.jpg');\r\n        this.load.image('donut', '../assets/images/donut.png');\r\n        this.load.image('donutShadow', '../assets/images/big-shadow.png');\r\n        this.load.image('soundButton', '../assets/images/btn-sfx.png');\r\n        this.load.image('donutsLogo', '../assets/images/donuts_logo.png');\r\n        this.load.image('playBtn', '../assets/images/btn-play.png');\r\n        this.load.image('cursor', '../assets/images/game/hand.png');\r\n        this.load.image('howToPlayBtn', '../assets/images/btn-howToPlay.png');\r\n        this.load.image('scoreTable', '../assets/images/bg-score.png');\r\n        this.load.image('timeUp', '../assets/images/text-timeup.png');\r\n        this.load.images(\r\n            ['red-01', 'blue-02', 'green-03', 'lightBlue-04', 'yellow-05', 'pink-06'],\r\n            [\r\n                '../assets/images/game/gem-01.png', '../assets/images/game/gem-02.png', '../assets/images/game/gem-03.png',\r\n                '../assets/images/game/gem-04.png', '../assets/images/game/gem-05.png', '../assets/images/game/gem-06.png'\r\n            ]\r\n        );\r\n        this.load.image('returnButton', '../assets/images/btn-return.png');\r\n        this.load.image('donutRed', '../assets/images/game/gem-01.png');\r\n        this.load.image('donutBlue', '../assets/images/game/gem-02.png');\r\n    }\r\n\r\n    create() {\r\n        window['music'] = this.add.audio('backgroundMusic');\r\n        window['music'].loop = true;\r\n\r\n        window['music'].play();\r\n\r\n        this.state.start('mainMenu');\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n",
    "import {createCustomButton} from '../objects/createCustomButton';\r\nimport {checkMusic} from \"../objects/chechMusic\";\r\n\r\nclass TutorialState extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let soundButton = createCustomButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        checkMusic(soundButton);\r\n\r\n        let returnBtn = createCustomButton(this, this.world.centerX + 110, this.world.centerY + 350, 'returnButton', 230, 150, () => {\r\n            this.state.start('mainMenu');\r\n        });\r\n\r\n        returnBtn.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        let tutorialText1 = this.add.text(\r\n            this.world.centerX + 300, this.world.centerY - 80,\r\n            '          How to play \\nYou have to make a horizontal or vertical line of 3 or more same donuts',\r\n            { fontSize: '48px', fill: 'violet', font: \"Fredoka One\", wordWrap: true, wordWrapWidth: 650 }\r\n        );\r\n\r\n        tutorialText1.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        this.add.sprite(this.world.centerX - 295, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 215, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 135, this.world.centerY - 90, 'donutRed');\r\n\r\n        this.add.sprite(this.world.centerX + 30, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 110, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 190, this.world.centerY - 90, 'donutBlue');\r\n\r\n        let tutorialText2 = this.add.text(\r\n            this.world.centerX + 270, this.world.centerY + 208,\r\n            'You have 30 seconds so get as much score as you can.',\r\n            { font: \"50px Fredoka One\", fill: 'violet', wordWrap: true, wordWrapWidth: 600 }\r\n        );\r\n\r\n        tutorialText2.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n    }\r\n}\r\n\r\nexport default TutorialState;\r\n"
  ]
}